when put data in store

If you're not sure where to put something, here are some common rules of thumb for determining what kind of data should be put into Redux:

    Do other parts of the application care about this data?

    Do you need to be able to create further derived data based on this original data?

    Is the same data being used to drive multiple components?

    Is there value to you in being able to restore this state to a given point in time (ie, time travel debugging)?

    Do you want to cache the data (ie, use what's in state if it's already there instead of re-requesting it)?

    Do you want to keep this data consistent while hot-reloading UI components (which may lose their internal state when swapped)?

resumo

We can create a Redux store using the Redux Toolkit configureStore API
    
    configureStore accepts a reducer function as a named argument
    
    configureStore automatically sets up the store with good default settings

Redux logic is typically organized into files called "slices"
    
    A "slice" contains the reducer logic and actions related to a specific feature / section of the Redux state
    
    Redux Toolkit's createSlice API generates action creators and action types for each individual reducer function you provide

Redux reducers must follow specific rules
    
    Should only calculate a new state value based on the state and action arguments
    
    Must make immutable updates by copying the existing state
    
    Cannot contain any asynchronous logic or other "side effects"
    
    Redux Toolkit's createSlice API uses Immer to allow "mutating" immutable updates

Async logic is typically written in special functions called "thunks"
    
    Thunks receive dispatch and getState as arguments
    
    Redux Toolkit enables the redux-thunk middleware by default

React-Redux allows React components to interact with a Redux store
    
    Wrapping the app with <Provider store={store}> enables all components to use the store
    
    Global state should go in the Redux store, local state should stay in React components